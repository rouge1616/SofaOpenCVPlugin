/******************************************************************************
*       SOFA, Simulation Open-Framework Architecture, version 1.0 RC 1        *
*                (c) 2006-2011 MGH, INRIA, USTL, UJF, CNRS                    *
*                                                                             *
* This library is free software; you can redistribute it and/or modify it     *
* under the terms of the GNU Lesser General Public License as published by    *
* the Free Software Foundation; either version 2.1 of the License, or (at     *
* your option) any later version.                                             *
*                                                                             *
* This library is distributed in the hope that it will be useful, but WITHOUT *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
* for more details.                                                           *
*                                                                             *
* You should have received a copy of the GNU Lesser General Public License    *
* along with this library; if not, write to the Free Software Foundation,     *
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.          *
*******************************************************************************
*                               SOFA :: Modules                               *
*                                                                             *
* Authors: The SOFA Team and external contributors (see Authors.txt)          *
*                                                                             *
* Contact information: contact@sofa-framework.org                             *
******************************************************************************/
#ifndef SOFA_PLUGIN_SOFAAR_PROJECTIVEPATTERN_H
#define SOFA_PLUGIN_SOFAAR_PROJECTIVEPATTERN_H

#include <vector>
#include <string>
#include <sofa/core/visual/DrawToolGL.h>
#include <sofa/helper/gl/template.h>
#include <sofa/helper/gl/Texture.h>
#include <sofa/helper/OptionsGroup.h>
#include <sofa/helper/gl/Axis.h>
#include <sofa/helper/gl/BasicShapes.h>
#include <sofa/core/visual/VisualModel.h>
#include <sofa/component/component.h>
#include <sofa/defaulttype/Vec.h>
#include <sofa/defaulttype/Vec3Types.h>
#include <sofa/component/visualmodel/VisualModelImpl.h>
#include <sofa/component/visualmodel/OglModel.h>
#include <sofa/component/collision/RayTriangleIntersection.h>
#include <sofa/component/container/MechanicalObject.h>


namespace sofa
{

namespace component
{

namespace visualmodel
{

using namespace sofa::defaulttype;
using namespace sofa::helper;

class SOFA_OPENGL_VISUAL_API ProjectivePattern : public VisualModelImpl
{
public:
	SOFA_CLASS(ProjectivePattern, VisualModelImpl);

protected:
    	ProjectivePattern();
    	~ProjectivePattern();

    	collision::RayTriangleIntersection rayCaster;
    	component::visualmodel::OglModel* _refModel;
    	core::behavior::MechanicalState<Vec3dTypes>* _refTrackedModel;
    	ResizableExtVector<Triangle> triangles;
    	ResizableExtVector<Quad> quads;
    	ResizableExtVector<Coord> verti;
    	ResizableExtVector<Coord> norma;
    	ResizableExtVector<Coord> projected_points;
    	std::vector<int> projected_points_status;
	bool m_flag_first;
        std::ofstream m_fileLog;

    	void computeRegularSampling(const Vec3d &dir, Coord p1, Coord p2, Coord p3);
	void computeNoiseSampling(const Vec3d &dir, Coord p1, Coord p2, Coord p3);
    	void computePointCloudSampling(const Vec3d &dir, Coord p1, Coord p2, Coord p3);

    	double euclideanDistance(Vec3d, Vec3d) const ;
    	double computeLeastSquares(helper::ReadAccessor<Data<VecCoord> >, ResizableExtVector<Coord>);
    	double computeLeastMeanSquares(helper::ReadAccessor<Data<VecCoord> >, ResizableExtVector<Coord>);
    	double computeRootMeanSquares(helper::ReadAccessor<Data<VecCoord> >, ResizableExtVector<Coord>);

public:
	virtual void initVisual();
 	virtual void init() { VisualModelImpl::init(); }
	virtual void updateBuffers();
	virtual void draw();

	void computeSampling();

	Data<bool> useProceduralSampling;
	Data<bool> useRegularSampling;
	Data<bool> updateEveryTimestep;
	Data<Vec3d> origin;
	Data<Real> radius;
	Data<Vec3d> projectionShift;
	Data<unsigned int> samples;
	Data<Quat> quaternion;
	Data<unsigned> noiseSeed;
	gl::Axis drawable;
	bool objSaveDone;
	Data<Vec3d> drawingSize;
	Data<VecCoord> trackedPoints;
	Data<ResizableExtVector<Coord> > omVertices;
	Data<ResizableExtVector<Coord> > omNormals;
	Data<ResizableExtVector<Coord> > projectedPoints;
};

typedef sofa::defaulttype::Vec<3,GLfloat> GLVec3f;
typedef sofa::defaulttype::ExtVectorTypes<GLVec3f,GLVec3f> GLExtVec3fTypes;

} // namespace visualmodel

} // namespace component

} // namespace sofa

#endif
